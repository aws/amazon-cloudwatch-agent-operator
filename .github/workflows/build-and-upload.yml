# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

name: Build And Upload Artifact for Branch
env:
  # Use terraform assume role for uploading to ecr
  AWS_ASSUME_ROLE: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}
  ECR_OPERATOR_STAGING_REPO: ${{ vars.ECR_OPERATOR_STAGING_REPO }}
  ECR_OPERATOR_RELEASE_IMAGE: ${{ vars.ECR_OPERATOR_RELEASE_IMAGE }}
  ECR_TARGET_ALLOCATOR_STAGING_REPO: ${{ vars.ECR_TARGET_ALLOCATOR_STAGING_REPO }}
  ECR_TARGET_ALLOCATOR_RELEASE_REPO: ${{ vars.ECR_TARGET_ALLOCATOR_RELEASE_REPO }}

on:
  workflow_call:
    inputs:
      release:
        description: 'Release Artifact'
        required: false
        default: false
        type: boolean
      e2e-test-bypass-link:
        description: 'Failed E2E Test Run Link (for bypass)'
        required: false
        type: string
      e2e-test-bypass-approver:
        description: 'Approver GitHub Username (for bypass)'
        required: false
        type: string
      tag:
        description: 'Staging Artifact Tag'
        required: false
        default: 'integration'
        type: string
      target-sha:
        default: ${{ github.sha}}
        type: string
      repository:
        default: ${{ github.repository }}
        type: string
      test-image-before-upload:
        description: "Run Test on the new container image"
        default: true
        type: boolean
      region:
        description: "AWS Region to run the build/test on"
        default: "us-west-2"
        type: string


jobs:
  MakeBinary:
    name: 'MakeContainerImage'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.target-sha }}
          repository: ${{inputs.repository}}


      - name: Set up Go 1.x
        uses: actions/setup-go@v4
        with:
          go-version: ~1.22.7
          cache: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          aws-region: ${{inputs.region}}

      - name: Login to ECR
        if: steps.cached_binaries.outputs.cache-hit == false
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        if: steps.cached_binaries.outputs.cache-hit == false
        uses: docker/setup-buildx-action@v1

      - name: Set up QEMU
        if: steps.cached_binaries.outputs.cache-hit == false
        uses: docker/setup-qemu-action@v1

      - name: Build Cloudwatch Agent Operator AMD64 Image
        uses: docker/build-push-action@v4
        if: steps.cached_binaries.outputs.cache-hit == false
        with:
          file: ./Dockerfile
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.ECR_OPERATOR_STAGING_REPO }}:${{ inputs.tag }}-linux-amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION_PKG=${{ env.VERSION_PKG }}
            VERSION=${{ inputs.tag }}
            VERSION_DATE=${{ env.VERSION_DATE }}
            AGENT_VERSION=${{ env.AGENT_VERSION }}
            AUTO_INSTRUMENTATION_JAVA_VERSION=${{ env.AUTO_INSTRUMENTATION_JAVA_VERSION }}
            AUTO_INSTRUMENTATION_PYTHON_VERSION=${{ env.AUTO_INSTRUMENTATION_PYTHON_VERSION }}
            AUTO_INSTRUMENTATION_DOTNET_VERSION=${{ env.AUTO_INSTRUMENTATION_DOTNET_VERSION }}
            AUTO_INSTRUMENTATION_NODEJS_VERSION=${{ env.AUTO_INSTRUMENTATION_NODEJS_VERSION }}
            DCMG_EXPORTER_VERSION=${{ env.DCMG_EXPORTER_VERSION }}
            NEURON_MONITOR_VERSION=${{ env.NEURON_MONITOR_VERSION }}
            TARGET_ALLOCATOR_VERSION=${{ env.TARGET_ALLOCATOR_VERSION }}
          outputs: type=image,push=true
          provenance: false

      - name: Build Cloudwatch Agent Operator ARM64 Image
        uses: docker/build-push-action@v4
        if: steps.cached_binaries.outputs.cache-hit == false
        with:
          file: ./Dockerfile
          context: .
          push: true
          platforms: linux/arm64
          tags: |
            ${{ env.ECR_OPERATOR_STAGING_REPO }}:${{ inputs.tag }}-linux-arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION_PKG=${{ env.VERSION_PKG }}
            VERSION=${{ inputs.tag }}
            VERSION_DATE=${{ env.VERSION_DATE }}
            AGENT_VERSION=${{ env.AGENT_VERSION }}
            AUTO_INSTRUMENTATION_JAVA_VERSION=${{ env.AUTO_INSTRUMENTATION_JAVA_VERSION }}
            AUTO_INSTRUMENTATION_PYTHON_VERSION=${{ env.AUTO_INSTRUMENTATION_PYTHON_VERSION }}
            AUTO_INSTRUMENTATION_DOTNET_VERSION=${{ env.AUTO_INSTRUMENTATION_DOTNET_VERSION }}
            AUTO_INSTRUMENTATION_NODEJS_VERSION=${{ env.AUTO_INSTRUMENTATION_NODEJS_VERSION }}
            DCMG_EXPORTER_VERSION=${{ env.DCMG_EXPORTER_VERSION }}
            NEURON_MONITOR_VERSION=${{ env.NEURON_MONITOR_VERSION }}
            TARGET_ALLOCATOR_VERSION=${{ env.TARGET_ALLOCATOR_VERSION }}
          outputs: type=image,push=true
          provenance: false

  MakeTABinary:
    name: 'MakeTargetAllocatorImage'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.target-sha }}
          repository: ${{inputs.repository}}

      - name: Set up Go 1.x
        uses: actions/setup-go@v4
        with:
          go-version: '>1.22'
          cache: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          aws-region: ${{inputs.region}}

      - name: Login to ECR
        if: steps.cached_binaries.outputs.cache-hit == false
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        if: steps.cached_binaries.outputs.cache-hit == false
        uses: docker/setup-buildx-action@v1

      - name: Set up QEMU
        if: steps.cached_binaries.outputs.cache-hit == false
        uses: docker/setup-qemu-action@v1

      - name: Build Binaries
        run: |
          go mod download
          go mod tidy
          mkdir -p cmd/amazon-cloudwatch-agent-target-allocator/bin
          GOARCH=amd64 make targetallocator
          GOARCH=arm64 make targetallocator
          ls -la cmd/amazon-cloudwatch-agent-target-allocator/bin/

      - name: Build Target Allocator AMD64 Image
        uses: docker/build-push-action@v4
        if: steps.cached_binaries.outputs.cache-hit == false
        with:
          file: ./cmd/amazon-cloudwatch-agent-target-allocator/Dockerfile
          context: ./cmd/amazon-cloudwatch-agent-target-allocator
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.ECR_TARGET_ALLOCATOR_STAGING_REPO }}:${{ inputs.tag }}-linux-amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Build Target Allocator ARM64 Image
        if: steps.cached_binaries.outputs.cache-hit == false
        uses: docker/build-push-action@v4
        with:
          file: ./cmd/amazon-cloudwatch-agent-target-allocator/Dockerfile
          context: ./cmd/amazon-cloudwatch-agent-target-allocator
          push: true
          platforms: linux/arm64
          tags: |
            ${{ env.ECR_TARGET_ALLOCATOR_STAGING_REPO }}:${{ inputs.tag }}-linux-arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  bypass-info:
    if: ${{ inputs.e2e-test-bypass-link != '' || inputs.e2e-test-bypass-approver != '' }}
    runs-on: ubuntu-latest
    steps:
      - name: Echo bypass information
        run: |
          echo "**E2E test bypass requested**" >> $GITHUB_STEP_SUMMARY
          echo "**Failing Test**: ${{ inputs.e2e-test-bypass-link }}" >> $GITHUB_STEP_SUMMARY
          echo "**Approver**: ${{ inputs.e2e-test-bypass-approver }}" >> $GITHUB_STEP_SUMMARY

  e2e-test:
    if: ${{inputs.test-image-before-upload}}
    name: "Application Signals E2E Test"
    needs: CreateManifest
    uses: ./.github/workflows/application-signals-e2e-test.yml
    secrets: inherit
    permissions:
      id-token: write
      contents: read
    with:
      tag: ${{ inputs.tag }}

  push-release-ecr:
    if: ${{ inputs.release }}
    needs: [ MakeTABinary, e2e-test, CreateManifest ]
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          aws-region: ${{inputs.region}}

      - name: Login to ECR
        id: login-ecr
        if: steps.cached_binaries.outputs.cache-hit == false
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push image to release ECR
        run: |
          docker buildx imagetools create \
          -t ${{ env.ECR_OPERATOR_RELEASE_IMAGE }} \
          ${{ env.ECR_OPERATOR_STAGING_REPO }}:${{ inputs.tag }}

  CreateManifest:
    needs: [ MakeBinary, MakeTABinary ]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.target-sha }}
          repository: ${{inputs.repository}}

      - name: Set up Go 1.x
        uses: actions/setup-go@v4
        with:
          go-version: '>1.22'
          cache: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE }}
          aws-region: ${{inputs.region}}

      - name: Login ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create manifests
        run: |
          docker manifest create ${{ env.ECR_TARGET_ALLOCATOR_STAGING_REPO }}:${{ inputs.tag }} \
            --amend ${{ env.ECR_TARGET_ALLOCATOR_STAGING_REPO }}:${{ inputs.tag }}-linux-amd64 \
            --amend ${{ env.ECR_TARGET_ALLOCATOR_STAGING_REPO }}:${{ inputs.tag }}-linux-arm64
          docker manifest push ${{ env.ECR_TARGET_ALLOCATOR_STAGING_REPO }}:${{ inputs.tag }}
          
          docker manifest create ${{ env.ECR_TARGET_ALLOCATOR_STAGING_REPO }}:${{ github.sha }} \
            --amend ${{ env.ECR_TARGET_ALLOCATOR_STAGING_REPO }}:${{ inputs.tag }}-linux-amd64 \
            --amend ${{ env.ECR_TARGET_ALLOCATOR_STAGING_REPO }}:${{ inputs.tag }}-linux-arm64
          docker manifest push ${{ env.ECR_TARGET_ALLOCATOR_STAGING_REPO }}:${{ github.sha }}


          docker manifest create ${{ env.ECR_OPERATOR_STAGING_REPO }}:${{ inputs.tag }} \
            --amend ${{ env.ECR_OPERATOR_STAGING_REPO }}:${{ inputs.tag }}-linux-amd64 \
            --amend ${{ env.ECR_OPERATOR_STAGING_REPO }}:${{ inputs.tag }}-linux-arm64
          docker manifest push ${{ env.ECR_OPERATOR_STAGING_REPO }}:${{ inputs.tag }}
          
          docker manifest create ${{ env.ECR_OPERATOR_STAGING_REPO }}:${{ github.sha }} \
            --amend ${{ env.ECR_OPERATOR_STAGING_REPO }}:${{ inputs.tag }}-linux-amd64 \
            --amend ${{ env.ECR_OPERATOR_STAGING_REPO }}:${{ inputs.tag }}-linux-arm64
          docker manifest push ${{ env.ECR_OPERATOR_STAGING_REPO }}:${{ github.sha }}