// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

package targetallocator

import (
	"fmt"

	policyV1 "k8s.io/api/policy/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/intstr"

	"github.com/aws/amazon-cloudwatch-agent-operator/apis/v1alpha1"
	"github.com/aws/amazon-cloudwatch-agent-operator/internal/manifests/manifestutils"
	"github.com/aws/amazon-cloudwatch-agent-operator/internal/naming"
)

func PodDisruptionBudget(params Params) (*policyV1.PodDisruptionBudget, error) {
	pdbSpec := params.TargetAllocator.Spec.PodDisruptionBudget.DeepCopy()
	// defaulter doesn't set PodDisruptionBudget if the strategy isn't valid,
	// if PodDisruptionBudget != nil and stategy isn't correct, users have set
	// it wrongly
	if pdbSpec != nil && params.TargetAllocator.Spec.AllocationStrategy != v1alpha1.TargetAllocatorAllocationStrategyConsistentHashing &&
		params.TargetAllocator.Spec.AllocationStrategy != v1alpha1.TargetAllocatorAllocationStrategyPerNode {
		params.Log.V(4).Info("current allocation strategy not compatible, skipping podDisruptionBudget creation")
		return nil, fmt.Errorf("target allocator pdb has been configured but the allocation strategy isn't not compatible")
	} else if pdbSpec == nil && params.TargetAllocator.Spec.AllocationStrategy == v1alpha1.TargetAllocatorAllocationStrategyLeastWeighted {
		params.Log.V(4).Info("current allocation strategy not compatible, skipping podDisruptionBudget creation")
		return nil, nil
	}
	// if pdb isn't provided for target allocator and it's enabled
	// using a valid strategy (consistent-hashing, per-node),
	// we set MaxUnavailable 1, which will work even if there is
	// just one replica, not blocking node drains but preventing
	// out-of-the-box from disruption generated by them with replicas > 1
	if pdbSpec == nil {
		pdbSpec = &v1alpha1.PodDisruptionBudgetSpec{
			MaxUnavailable: &intstr.IntOrString{
				Type:   intstr.Int,
				IntVal: 1,
			},
		}
	}

	name := naming.TAPodDisruptionBudget(params.TargetAllocator.Name)
	labels := manifestutils.Labels(params.TargetAllocator.ObjectMeta, name, params.TargetAllocator.Spec.Image, ComponentAmazonCloudWatchAgentTargetAllocator, nil)
	configMap, err := ConfigMap(params)
	if err != nil {
		params.Log.Info("failed to construct target allocator config map for annotations")
		configMap = nil
	}
	annotations := Annotations(params.TargetAllocator, configMap, params.Config.AnnotationsFilter())

	objectMeta := metav1.ObjectMeta{
		Name:        name,
		Namespace:   params.TargetAllocator.Namespace,
		Labels:      labels,
		Annotations: annotations,
	}

	return &policyV1.PodDisruptionBudget{
		ObjectMeta: objectMeta,
		Spec: policyV1.PodDisruptionBudgetSpec{
			MinAvailable:   pdbSpec.MinAvailable,
			MaxUnavailable: pdbSpec.MaxUnavailable,
			Selector: &metav1.LabelSelector{
				MatchLabels: manifestutils.TASelectorLabels(params.TargetAllocator, ComponentAmazonCloudWatchAgentTargetAllocator),
			},
		},
	}, nil
}
